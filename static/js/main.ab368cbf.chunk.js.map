{"version":3,"sources":["code/index.js","code/header.js","code/helmet.js","App.js","serviceWorker.js","index.js"],"names":["Lib","fetch","this","FILES_LIST_URL","dd","JSON","text","files_list","parse","_last_file","download_url","i","length","name","indexOf","UserLat","userLong","caseLat","caseLong","unit","radUserLat","Math","PI","radcaseLat","theta","radtheta","dist","sin","cos","acos","navigator","permissions","Promise","accept","query","then","PermissionStatus","state","geolocation","getCurrentPosition","res","coords","latitude","longitude","accuracy","window","alert","a","getLatestFile","report_date","split","pop","replace","reverse","dayjs","toDate","toLocaleDateString","Papa","download","complete","results","data","map","element","index","return_element","province_state","country_region","last_update","confirmed","parseInt","deaths","recovered","parseFloat","filter","Header","props","open","encodeURIComponent","location","href","data-action","className","style","backgroundColor","color","fontWeight","htmlFor","type","id","paddingBottom","getTwitterShareURL","getShareWhatsappLink","onClick","shareOnFb","React","Component","HelmetComponent","Helmet","charSet","rel","sizes","content","App","cases","closest","loading","error","geolocationPermission","loadData","bind","loadGeoPermissionStatus","instance","hasGeoLocationActivated","setState","console","log","err","lib","all","fetchData","fetchLocation","_res","raw_distance","distance","distance_from_user","round","sort","elementA","elementB","e","elements","element1","key","data-label","maxWidth","justifyContent","textAlign","getAuthorizedScreen","getLoadingScreen","getErrorScreen","getNotLoadedScreen","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ab368cbf.chunk.js","sourcesContent":["import * as Papa from 'papaparse';\nimport * as dayjs from 'dayjs';\n\n//https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/03-02-2020.csv\n\nexport default class Lib {\n\n\n    get FILES_LIST_URL(){\n        return `https://api.github.com/repos/CSSEGISandData/COVID-19/contents/csse_covid_19_data/csse_covid_19_daily_reports`;\n    }\n\n    async getLatestFile(){\n        let dd = await fetch(this.FILES_LIST_URL);\n        let files_list = JSON.parse(await dd.text());\n        let _last_file = {\n            download_url: \"\"\n        };\n        for(let i=files_list.length-1;i>0;i--){\n            if(files_list[i].name.indexOf('csv')>-1){\n                _last_file = files_list[i];\n                break;\n            }\n        }\n        return _last_file.download_url;\n    }\n\n    static get instance(){\n        return window['geo_tool_1'] ? window['geo_tool_1'] : (()=>{\n            window['geo_tool_1'] = new Lib();\n            return window['geo_tool_1'];\n        })();\n    }\n\n    distance(UserLat, userLong, caseLat, caseLong, unit) {\n        if ((UserLat == caseLat) && (userLong == caseLong)) {\n            return 0;\n        }\n        else {\n            var radUserLat = Math.PI * UserLat / 180;\n            var radcaseLat = Math.PI * caseLat / 180;\n            var theta = userLong - caseLong;\n            var radtheta = Math.PI * theta / 180;\n            var dist = Math.sin(radUserLat) * Math.sin(radcaseLat) + Math.cos(radUserLat) * Math.cos(radcaseLat) * Math.cos(radtheta);\n            if (dist > 1) {\n                dist = 1;\n            }\n            dist = Math.acos(dist);\n            dist = dist * 180 / Math.PI;\n            dist = dist * 60 * 1.1515;\n            if (unit == \"K\") { dist = dist * 1.609344 }\n            if (unit == \"N\") { dist = dist * 0.8684 }\n            return dist;\n        }\n    }\n\n    async hasGeoLocationActivated(){\n        if(navigator.permissions){\n            return await new Promise((accept)=>{\n                navigator.permissions.query({name: 'geolocation'}).then(function(PermissionStatus) {\n                    accept(PermissionStatus.state == 'granted');\n                })\n            });\n        }\n        return null;\n    }\n\n    async fetchLocation() {\n        if (\"geolocation\" in navigator) {\n            /* la geolocalización está disponible */\n            let res = await new Promise((accept) => {\n                /**\n                 *  latitude: 10.4963315\n                    longitude: -66.877371\n                    altitude: null\n                    accuracy: 26\n                    altitudeAccuracy: null\n                    heading: null\n                    speed: null\n                 */\n                navigator.geolocation.getCurrentPosition(accept);\n            });\n            return {\n                coords: [res.coords.latitude, res.coords.longitude],\n                accuracy: res.coords.accuracy\n            };\n        } else {\n            /* la geolocalización NO está disponible */\n            window.alert(\"Gelocation not available for this device\");\n        }\n    }\n\n    async getNextUrl(){\n\n    }\n\n    async fetchData() {\n        let data = await new Promise(async (accept) => {\n            let download_url = await this.getLatestFile();\n            let report_date = download_url.split(\"/\").pop().split(\".\")[0];\n            report_date = report_date.replace(/-/g, '/').split(\"/\").reverse();\n            report_date = dayjs(report_date).toDate().toLocaleDateString();\n\n            Papa.parse(download_url, {\n                download: true,\n                complete: function (results) {\n                    accept(results.data.map((element, index) => {\n                        if (index < 1) return null;\n                        let return_element =  {\n                            province_state: element[0],\n                            country_region: element[1],\n                            last_update: element[2],\n                            confirmed: parseInt(element[3]),\n                            deaths: parseInt(element[4]),\n                            recovered: parseInt(element[5]),\n                            latitude: parseFloat(element[6]),\n                            longitude: parseFloat(element[7]),\n                            report_date\n                        };\n                        if(return_element.latitude != return_element.latitude) return null;\n                        return return_element;\n                    }).filter((element) => !!element));\n                }\n            });\n        });\n        return data;\n    }\n}","import React from 'react';\nimport {Helmet} from 'react-helmet';\n\nexport default class Header extends React.Component {\n    constructor(props){\n        super(props);\n    }\n\n    shareOnFb(){\n        window.open('https://www.facebook.com/sharer/sharer.php?u='+encodeURIComponent(window.location.href), '_blank');\n    }\n\n    getTwitterShareURL(){\n        return \"https://twitter.com/intent/tweet?text=\"+encodeURIComponent(\"How close are you from the CoronaVirus reported cases? Get the answer on: \"+window.location.href);\n    }\n\n    getShareWhatsappLink(){\n        const href = \"whatsapp://send?text=How close are you from the CoronaVirus reported cases? Get the answer on: \"+window.location.href;\n        return <a href={href} data-action=\"share/whatsapp/share\" className=\"button\" style={{backgroundColor:'#1EBEA5',color:'white', fontWeight:'bold'}}>Whatsapp</a>\n    }\n\n    render() {\n        return (\n            <header className=\"sticky\">\n                <a href=\"./\" className=\"logo\"><b>CClose</b></a>\n                <label htmlFor=\"modal-control\" className=\"button\">Share</label>\n                <a href=\"mailto:azolotdev@gmail.com\" className=\"button\">Contact</a>\n                <input type=\"checkbox\" id=\"modal-control\" className=\"modal\" />\n                <div>\n                    <div className=\"card\">\n                        <label htmlFor=\"modal-control\" className=\"modal-close\" ></label>\n                        <h3 className=\"section\" style={{paddingBottom:'1em'}}>Share via</h3>\n                        <a className=\"button\" href={this.getTwitterShareURL()} style={{backgroundColor:'#1DA1F2', color:'white', fontWeight:'bold'}}>Twitter</a>\n                        {this.getShareWhatsappLink()}\n                        <button className=\"button\" onClick={this.shareOnFb} style={{backgroundColor:'#3C5A9A', color:'white', fontWeight:'bold'}}>Facebook</button>\n                    </div>\n                </div>\n            </header>\n        )\n    }\n}","import React from 'react';\nimport {Helmet} from 'react-helmet';\n\nexport default class HelmetComponent extends React.Component {\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        return (\n            <Helmet>\n                <meta charSet=\"utf-8\" />\n                <title>CClose: Closes CoronaVirus case</title>\n                <link rel=\"canonical\" href=\"./\" />\n                <link rel=\"icon\" type=\"image/png\" href=\"./virus_icon.png\" sizes=\"16x16\" />\n                <meta name=\"description\" content=\"Closes Coronavirus to your location. Daily report\"></meta>\n            </Helmet>\n        );\n    }\n}","import React from 'react';\nimport './static/mini-default.min.css';\nimport './static/App.css';\nimport Lib from './code'\nimport Header from './code/header';\nimport HelmetComponent from './code/helmet';\n\nexport class App extends React.Component {\n\n    state = {\n        cases: [],\n        closest: null,\n        loading: false,\n        error: null,\n        geolocationPermission: null\n    }\n\n    constructor(props) {\n        super(props);\n        this.loadData = this.loadData.bind(this);\n        this.loadGeoPermissionStatus = this.loadGeoPermissionStatus.bind(this);\n        /*\n        this.loadData()\n        .catch((err) => {\n            console.log({ err });\n        })\n        */\n       this.loadGeoPermissionStatus()\n       .then(()=>{\n           if(this.state.geolocationPermission !== false){\n                this.loadData();\n           }\n       });\n    }\n\n    async loadGeoPermissionStatus(){\n        try{\n            let geolocationPermission = await Lib.instance.hasGeoLocationActivated();\n            this.setState({geolocationPermission})\n        }catch(err){\n            console.log({err});\n            this.setState({geolocationPermission: null})\n        }\n    }\n\n    async loadData() {\n        let lib = new Lib();\n        //let cases = await lib.fetchData();\n        //let location = await lib.fetchLocation();\n        this.setState({\n            loading: true\n        });\n        try {\n            const _res = await Promise.all([lib.fetchData(), lib.fetchLocation()])\n            let cases = _res[0];\n            let location = _res[1];\n            cases = cases.map((element) => {\n                let raw_distance = lib.distance(location.coords[0], location.coords[1], element.latitude, element.longitude, 'K');\n                element.distance_from_user = Math.round(raw_distance * 100) / 100;\n                return element;\n            })\n                .sort((elementA, elementB) => {\n                    return (elementA.distance_from_user > elementB.distance_from_user) ? 1 : (elementA.distance_from_user < elementB.distance_from_user) ? -1 : 0;\n                });\n            console.log({ cases });\n            //Lib.instance\n            this.setState({\n                cases: cases,\n                closest: cases[0],\n                loading: false\n            });\n        } catch (e) {\n            console.log({e});\n            this.setState({\n                loading: false, error: e\n            })\n            /**\n                province_state: \"\"\n                country_region: \"Dominican Republic\"\n                last_update: \"2020-03-02T16:33:02\"\n                confirmed: 1\n                distance_from_user: \"\"\n                deaths: 0\n                recovered: 0\n                latitude: 18.7357\n                longitude: -70.1627\n                distance_from_user: 981.8287136025742\n             */\n        }\n    }\n\n    getAuthorizedScreen() {\n\n        let elements = this.state.cases\n            .filter((e, index) => index > 1)\n            .map((element1, index) =>\n                <tr key={`LAT=${element1.latitude};LONG=${element1.longitude};${index}`}>\n                    <td data-label=\"Location\">{element1.country_region} <small>{element1.province_state}</small></td>\n                    <td data-label=\"Distance Away\">{element1.distance_from_user} km</td>\n                    <td data-label=\"Confirmed\">{element1.confirmed}</td>\n                    <td data-label=\"Deaths\">{element1.deaths}</td>\n                    <td data-label=\"Recovered\">{element1.recovered}</td>\n                </tr>\n            )\n        let closest = \"\";\n        if (this.state.closest) {\n            closest =\n                <div className=\"card error\" style={{ maxWidth: '100%' }}>\n                    <h2>{this.state.closest.distance_from_user} km <small style={{ color: 'white' }}>{this.state.closest.country_region} {this.state.closest.province_state ? '-' + this.state.closest.province_state : ''}</small></h2>\n                    <div>\n                        <p>Confirmed: {this.state.closest.confirmed}</p>\n                        <p>Deaths: {this.state.closest.deaths}</p>\n                        <p>Recovered: {this.state.closest.recovered}</p>\n                    </div>\n                </div>\n        }\n        return (<div className=\"App\">\n            <Header />\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-sm-12\">\n                        <h1>CC: CoronaClose\n                                <small>How close are you from the <span style={{ color: 'red' }}>Corona VID-19</span> cases?</small>\n                        </h1>\n                        <h2>Closest case to you (at {this.state.closest.report_date})</h2>\n                        <small><a href=\"https://github.com/CSSEGISandData/COVID-19\">Information Source</a></small>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    {closest ? closest : ''}\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-sm-12 col-md-12 col-sm-first\">\n                        <h3>Next Closest Cases</h3>\n                        <table>\n                            <thead>\n                                <tr>\n                                    <th>Location</th>\n                                    <th>Distance</th>\n                                    <th>Confirmed</th>\n                                    <th>Deaths</th>\n                                    <th>Recovered</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {elements}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </div>);\n    }\n\n    getNotLoadedScreen() {\n        return (\n            <div className=\"row\" style={{ justifyContent: 'center' }}>\n                <div className=\"card\" style={{ textAlign: 'center' }}>\n                    <h1>Note: You must enable location in order to get the data</h1>\n                    <button className=\"button\" onClick={this.loadData}>Begin</button>\n                </div>\n            </div>\n        )\n    }\n\n    getLoadingScreen() {\n        return (\n            <div className=\"row\" style={{ justifyContent: 'center' }}>\n                <div className=\"col-sm-12\">\n                    <h1>Loading...</h1>\n                </div>\n            </div>\n        )\n    }\n\n    getErrorScreen(){\n        return (\n            <div className=\"row\" style={{ justifyContent: 'center' }}>\n                <div className=\"col-sm-12\">\n                    <h1>An error has occurred. Please try again later and try cleaning your browser cache.</h1>\n                    <button className=\"button\" onClick={this.loadData}>Try Again</button>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        if(this.state.closest){\n            return <div>\n                <HelmetComponent/>\n                {this.getAuthorizedScreen()}\n            </div>;\n        }\n        if(this.state.loading){\n            return <div>\n                <HelmetComponent/>\n            {this.getLoadingScreen()}</div>\n        }\n        if(this.state.error){\n            return <div>\n                <HelmetComponent/>\n            {this.getErrorScreen()}</div>\n        }\n        return <div>\n        <HelmetComponent/>\n        {this.getNotLoadedScreen()}</div>;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}