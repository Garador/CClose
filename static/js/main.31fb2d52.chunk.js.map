{"version":3,"sources":["code/db.js","code/index.js","code/header.js","code/helmet.js","App.js","serviceWorker.js","index.js"],"names":["DBManager","table","selectorFunction","Promise","accept","reject","db","transaction","a","results","data","value","add","id","index","instance","Dexie","version","stores","latestData","window","Lib","fetch","this","FILES_LIST_URL","dd","JSON","text","files_list","parse","_last_file","download_url","i","length","name","indexOf","UserLat","userLong","caseLat","caseLong","unit","radUserLat","Math","PI","radcaseLat","theta","radtheta","dist","sin","cos","acos","navigator","permissions","query","then","PermissionStatus","state","geolocation","getCurrentPosition","res","coords","latitude","longitude","accuracy","json","fetchDeviceLocation","console","log","e","fetchIpLocation","downloadUrl","getWithKey","get","orderBy","reverse","toArray","latest_link","latest_report","date_millis","deleteRecords","where","aboveOrEqual","delete","storeWithKey","date","link","values","link_id","getLatestFile","DEFAULT_FILE_URL","getStoredData","currentData","report_date","split","pop","dayjs","toDate","Papa","download","complete","returnResults","map","element","return_element","province_state","country_region","last_update","confirmed","parseInt","deaths","recovered","parseFloat","toLocaleDateString","filter","storeFetchedData","getTime","file_date","subtract","format","Date","Header","props","open","encodeURIComponent","location","href","data-action","className","style","backgroundColor","color","fontWeight","htmlFor","type","paddingBottom","getTwitterShareURL","getShareWhatsappLink","onClick","shareOnFb","React","Component","HelmetComponent","Helmet","charSet","rel","sizes","content","App","cases","closest","loading","error","geolocationPermission","loadData","bind","loadGeoPermissionStatus","catch","err","hasGeoLocationActivated","setState","lib","all","fetchData","fetchLocation","_res","raw_distance","distance","distance_from_user","round","sort","elementA","elementB","elements","element1","key","data-label","maxWidth","justifyContent","textAlign","getAuthorizedScreen","getLoadingScreen","getErrorScreen","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"yXACaA,EAAb,4IAkBqBC,EAAOC,GAlB5B,8FAmB2B,IAAIC,SAAQ,SAACC,EAAQC,GACpC,EAAKC,GAAGC,YAAY,IAAK,EAAKD,GAAGL,GAAjC,sBAAyC,4BAAAO,EAAA,+EAEXN,EAAiB,EAAKI,GAAGL,IAFd,OAE3BQ,EAF2B,OAGjCL,EAAOK,GAH0B,gDAKjCJ,EAAO,EAAD,IAL2B,6DApBrD,cAmBcK,EAnBd,yBA6BeA,GA7Bf,gLAgCuBT,EAAOU,GAhC9B,8FAiC4B,IAAIR,SAAQ,SAACC,EAAQC,GACrC,EAAKC,GAAGC,YAAY,KAAM,EAAKD,GAAGL,GAAlC,sBAA0C,4BAAAO,EAAA,+EAEjB,EAAKF,GAAGL,GAAOW,IAAID,GAFF,OAE5BE,EAF4B,OAGlCT,EAAOS,GAH2B,gDAKlCR,EAAO,EAAD,IAL4B,6DAlCtD,cAiCcS,EAjCd,yBA2CeA,GA3Cf,iLA8CwBb,EAAOC,GA9C/B,8FA+C2B,IAAIC,SAAQ,SAACC,EAAQC,GACpC,EAAKC,GAAGC,YAAY,KAAM,EAAKD,GAAGL,GAAlC,sBAA0C,4BAAAO,EAAA,+EAEZN,EAAiB,EAAKI,GAAGL,IAFb,OAE5BQ,EAF4B,OAGlCL,EAAOK,GAH2B,gDAKlCJ,EAAO,EAAD,IAL4B,6DAhDtD,cA+CcK,EA/Cd,yBAyDeA,GAzDf,6HAeQ,OAPIV,EAAUe,SAAV,gBACAf,EAAUe,SAAV,cAAsC,IAAIC,IAAM,iBAChDhB,EAAUe,SAAV,cAAoCE,QAAQ,GAAGC,OAC/C,CACIC,WAAY,yBAGbnB,EAAUe,SAAV,iBAff,gCAIQ,OADAK,OAAM,QAAcA,OAAM,QAAcA,OAAM,QAAc,IAAIpB,EACzDoB,OAAM,YAJrB,KCMqBC,G,oPAaEC,MAAMC,KAAKC,gB,cAAtBC,E,YACaC,K,SAAiBD,EAAGE,O,mBAAjCC,E,KAAkBC,M,gBAClBC,EAAa,CACbC,aAAc,IAEVC,EAAEJ,EAAWK,OAAO,E,aAAED,EAAE,G,sBACzBJ,EAAWI,GAAGE,KAAKC,QAAQ,QAAQ,G,wBAClCL,EAAaF,EAAWI,G,6BAFEA,I,iDAM3BF,EAAWC,c,sIAUbK,EAASC,EAAUC,EAASC,EAAUC,GAC3C,GAAKJ,GAAWE,GAAaD,GAAYE,EACrC,OAAO,EAGP,IAAIE,EAAaC,KAAKC,GAAKP,EAAU,IACjCQ,EAAaF,KAAKC,GAAKL,EAAU,IACjCO,EAAQR,EAAWE,EACnBO,EAAWJ,KAAKC,GAAKE,EAAQ,IAC7BE,EAAOL,KAAKM,IAAIP,GAAcC,KAAKM,IAAIJ,GAAcF,KAAKO,IAAIR,GAAcC,KAAKO,IAAIL,GAAcF,KAAKO,IAAIH,GAShH,OARIC,EAAO,IACPA,EAAO,GAIXA,EAAc,IADdA,EAAc,KADdA,EAAOL,KAAKQ,KAAKH,IACGL,KAAKC,IACN,OACP,KAARH,IAAeO,GAAc,UACrB,KAARP,IAAeO,GAAc,OAC1BA,I,8JAKRI,UAAUC,Y,gCACI,IAAIjD,SAAQ,SAACC,GACtB+C,UAAUC,YAAYC,MAAM,CAACnB,KAAM,gBAAgBoB,MAAK,SAASC,GAC7DnD,EAAiC,WAA1BmD,EAAiBC,a,wEAI7B,M,6QAIS,IAAIrD,SAAQ,SAACC,EAAQC,GAUjC8C,UAAUM,YAAYC,mBAAmBtD,EAAQC,M,cAVjDsD,E,yBAYG,CACHC,OAAQ,CAACD,EAAIC,OAAOC,SAAUF,EAAIC,OAAOE,WACzCC,SAAUJ,EAAIC,OAAOG,W,yQAKRzC,MAAM,gC,cAAnBZ,E,gBACSA,EAAKsD,O,cAAlBtD,E,yBACO,CACHkD,OAAQ,CAAClD,EAAI,SAAcA,EAAI,WAC/BqD,UAAW,I,4PAMX,gBAAiBZ,W,0CAGD5B,KAAK0C,sB,cAAjBN,E,yBACOA,G,gCAEPO,QAAQC,IAAI,qCAAqC,CAACC,EAAC,O,yBAK/C7C,KAAK8C,kB,eAAjBV,E,yBACOA,G,4LAQSW,G,gGAEKtE,EAAUe,SAASwD,WAAW,cAAc,SAACpD,GAC1D,OAAGmD,EACQnD,EAAWqD,IAAIF,GAEfnD,EAAWsD,QAAQ,QAAQC,UAAUC,a,cAJhDjE,E,yBAOG4D,EAAc5D,EAAOA,EAAK,I,uCAEjCwD,QAAQC,IAAI,CAACC,EAAC,O,kBACP,M,gMAaQQ,EAAaC,EAAeC,G,gGAGrC9E,EAAUe,SAASgE,cAAc,cAAc,SAAS5D,GAC1D,OAAOA,EAAW6D,MAAM,QAAQC,aAAa,GAAGC,Y,uBAGhClF,EAAUe,SAASoE,aAAa,aAAc,CAC9DC,KAAMN,EACNO,KAAMT,EACNU,OAAQT,I,cAHRU,E,yBAKG,CAACA,Y,uCAERrB,QAAQC,IAAI,CAACC,EAAC,O,kBACP,M,6RAKM,IAAIjE,QAAJ,uCAAY,WAAOC,GAAP,mBAAAI,EAAA,+EAGA,EAAKgF,gBAHL,OAGrBzD,EAHqB,sDAKrBA,EAAe,EAAK0D,iBALC,wBAOC,EAAKC,cAAc3D,GAPpB,SAOnB4D,EAPmB,QAmCrBvF,EAAOuF,EAAYL,SA1BfM,EAAc7D,EAAa8D,MAAM,KAAKC,MAAMD,MAAM,KAAK,GAC3DD,EAAcG,EAAMH,GAAaI,SACjCC,QAAWlE,EAAc,CACrBmE,UAAU,EACVC,SAAS,WAAD,4BAAE,WAAO1F,GAAP,eAAAD,EAAA,6DACA4F,EAAgB3F,EAAQC,KAAK2F,KAAI,SAACC,EAASxF,GAC7C,GAAIA,EAAQ,EAAG,OAAO,KACtB,IAAIyF,EAAkB,CAClBC,eAAgBF,EAAQ,GACxBG,eAAgBH,EAAQ,GACxBI,YAAaJ,EAAQ,GACrBK,UAAWC,SAASN,EAAQ,IAC5BO,OAAQD,SAASN,EAAQ,IACzBQ,UAAWF,SAASN,EAAQ,IAC5BzC,SAAUkD,WAAWT,EAAQ,IAC7BxC,UAAWiD,WAAWT,EAAQ,IAC9BV,YAAaA,EAAYoB,sBAE7B,OAAGT,EAAe1C,UAAY0C,EAAe1C,SAAiB,KACvD0C,KACRU,QAAO,SAACX,GAAD,QAAeA,KAhBnB,SAiBA,EAAKY,iBAAiBnF,EAAcqE,EAAeR,EAAYuB,WAjB/D,OAkBN/G,EAAOgG,GAlBD,2CAAF,mDAAC,MAbQ,yDAAZ,uD,cAAb1F,E,yBAsCGA,G,sIApMP,MAAM,iH,uCAIN,IAAI0G,EAAYrB,IAAQsB,SAAS,EAAG,KAAKC,OAAO,eAAiB,aACjE,MAAM,mHAAN,OAA0HF,EAA1H,U,uCA8HA,OAAO,IAAIG,KAAKxB,IAAQuB,OAAO,eAAeH,a,gCA3G9C,OAAO/F,OAAM,aACTA,OAAM,WAAiB,IAAIC,GADDD,OAAM,e,cChCvBoG,E,YACjB,WAAYC,GAAO,qEACTA,I,yEAINrG,OAAOsG,KAAK,gDAAgDC,mBAAmBvG,OAAOwG,SAASC,MAAO,Y,2CAItG,MAAO,yCAAyCF,mBAAmB,6EAA6EvG,OAAOwG,SAASC,Q,6CAIhK,IAAMA,EAAO,kGAAkGzG,OAAOwG,SAASC,KAC/H,OAAO,uBAAGA,KAAMA,EAAMC,cAAY,uBAAuBC,UAAU,SAASC,MAAO,CAACC,gBAAgB,UAAUC,MAAM,QAASC,WAAW,SAAjI,c,+BAIP,OACI,4BAAQJ,UAAU,UACd,uBAAGF,KAAK,KAAKE,UAAU,QAAO,sCAC9B,2BAAOK,QAAQ,gBAAgBL,UAAU,UAAzC,SACA,uBAAGF,KAAK,6BAA6BE,UAAU,UAA/C,WACA,2BAAOM,KAAK,WAAWxH,GAAG,gBAAgBkH,UAAU,UACpD,6BACI,yBAAKA,UAAU,QACX,2BAAOK,QAAQ,gBAAgBL,UAAU,gBACzC,wBAAIA,UAAU,UAAUC,MAAO,CAACM,cAAc,QAA9C,aACA,uBAAGP,UAAU,SAASF,KAAMtG,KAAKgH,qBAAsBP,MAAO,CAACC,gBAAgB,UAAWC,MAAM,QAASC,WAAW,SAApH,WACC5G,KAAKiH,uBACN,4BAAQT,UAAU,SAASU,QAASlH,KAAKmH,UAAWV,MAAO,CAACC,gBAAgB,UAAWC,MAAM,QAASC,WAAW,SAAjH,mB,GA/BYQ,IAAMC,WCArBC,E,YACjB,WAAYpB,GAAO,qEACTA,I,sEAIN,OACI,kBAACqB,EAAA,OAAD,KACI,0BAAMC,QAAQ,UACd,kEACA,0BAAMC,IAAI,YAAYnB,KAAK,OAC3B,0BAAMmB,IAAI,OAAOX,KAAK,YAAYR,KAAK,mBAAmBoB,MAAM,UAChE,0BAAM/G,KAAK,cAAcgH,QAAQ,2D,GAZJP,IAAMC,WCoMpCO,EAhMf,YAUI,WAAY1B,GAAQ,IAAD,8BACf,4CAAMA,KATVjE,MAAQ,CACJ4F,MAAO,GACPC,QAAS,KACTC,SAAS,EACTC,MAAO,KACPC,sBAAuB,MAKvB,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,wBAA0B,EAAKA,wBAAwBD,KAA7B,gBAOhC,EAAKC,0BACJrG,MAAK,WACDY,QAAQC,IAAI,SACZ,EAAKsF,cAETG,OAAM,SAACC,GACP3F,QAAQC,IAAI,SACZD,QAAQC,IAAI,CAAC0F,WAjBE,EAVvB,gOAiC8CxI,EAAIN,SAAS+I,0BAjC3D,OAiCgBN,EAjChB,OAkCYjI,KAAKwI,SAAS,CAACP,0BAlC3B,gDAoCYtF,QAAQC,IAAI,CAAC0F,IAAG,OAChBtI,KAAKwI,SAAS,CAACP,sBAAuB,OArClD,6QA0CYQ,EAAM,IAAI3I,EAGdE,KAAKwI,SAAS,CACVT,SAAS,IA9CrB,kBAiD+BnJ,QAAQ8J,IAAI,CAACD,EAAIE,YAAaF,EAAIG,kBAjDjE,OAiDkBC,EAjDlB,OAkDgBhB,EAAQgB,EAAK,GACbxC,EAAWwC,EAAK,GACpBhB,EAAQA,EAAM/C,KAAI,SAACC,GACf,IAAI+D,EAAeL,EAAIM,SAAS1C,EAAShE,OAAO,GAAIgE,EAAShE,OAAO,GAAI0C,EAAQzC,SAAUyC,EAAQxC,UAAW,KAE7G,OADAwC,EAAQiE,mBAAqB7H,KAAK8H,MAAqB,IAAfH,GAAsB,IACvD/D,KAEVmE,MAAK,SAACC,EAAUC,GACb,OAAQD,EAASH,mBAAqBI,EAASJ,mBAAsB,EAAKG,EAASH,mBAAqBI,EAASJ,oBAAuB,EAAI,KAGhJhJ,KAAKwI,SAAS,CACVX,MAAOA,EACPC,QAASD,EAAM,GACfE,SAAS,IAhEzB,kDAmEYpF,QAAQC,IAAI,CAACC,EAAC,OACd7C,KAAKwI,SAAS,CACVT,SAAS,EAAOC,MAAM,EAAD,KArErC,4JA4EQ,IAAIqB,EAAWrJ,KAAKiC,MAAM4F,MACrBnC,QAAO,SAAC7C,EAAGtD,GAAJ,OAAcA,EAAQ,KAC7BuF,KAAI,SAACwE,EAAU/J,GAAX,OACD,wBAAIgK,IAAG,cAASD,EAAShH,SAAlB,iBAAmCgH,EAAS/G,UAA5C,YAAyDhD,IAC5D,wBAAIiK,aAAW,YAAYF,EAASpE,eAApC,IAAoD,+BAAQoE,EAASrE,iBACrE,wBAAIuE,aAAW,iBAAiBF,EAASN,mBAAzC,OACA,wBAAIQ,aAAW,aAAaF,EAASlE,WACrC,wBAAIoE,aAAW,UAAUF,EAAShE,QAClC,wBAAIkE,aAAW,aAAaF,EAAS/D,eAG7CuC,EAAU,GAYd,OAXI9H,KAAKiC,MAAM6F,UACXA,EACI,yBAAKtB,UAAU,aAAaC,MAAO,CAAEgD,SAAU,SAC3C,4BAAKzJ,KAAKiC,MAAM6F,QAAQkB,mBAAxB,OAA+C,2BAAOvC,MAAO,CAAEE,MAAO,UAAY3G,KAAKiC,MAAM6F,QAAQ5C,eAAtD,IAAuElF,KAAKiC,MAAM6F,QAAQ7C,eAAiB,IAAMjF,KAAKiC,MAAM6F,QAAQ7C,eAAiB,KACpM,6BACI,yCAAejF,KAAKiC,MAAM6F,QAAQ1C,WAClC,sCAAYpF,KAAKiC,MAAM6F,QAAQxC,QAC/B,yCAAetF,KAAKiC,MAAM6F,QAAQvC,cAI1C,yBAAKiB,UAAU,OACnB,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,aACX,8CACQ,6DAAkC,0BAAMC,MAAO,CAAEE,MAAO,QAAtB,iBAAlC,YAER,uDAA6B3G,KAAKiC,MAAM6F,QAAQzD,YAAhD,KACA,+BAAO,uBAAGiC,KAAK,8CAAR,yBAGf,yBAAKE,UAAU,OACVsB,GAAoB,IAEzB,yBAAKtB,UAAU,OACX,yBAAKA,UAAU,oCACX,kDACA,+BACI,+BACI,4BACI,wCACA,wCACA,yCACA,sCACA,2CAGR,+BACK6C,UAhIjC,2CA0IQ,OACI,yBAAK7C,UAAU,MAAMC,MAAO,CAAEiD,eAAgB,WAC1C,yBAAKlD,UAAU,OAAOC,MAAO,CAAEkD,UAAW,WACtC,uFACA,4BAAQnD,UAAU,SAASU,QAASlH,KAAKkI,UAAzC,aA9IpB,yCAqJQ,OACI,yBAAK1B,UAAU,MAAMC,MAAO,CAAEiD,eAAgB,WAC1C,yBAAKlD,UAAU,aACX,8CAxJpB,uCA+JQ,OACI,yBAAKA,UAAU,MAAMC,MAAO,CAAEiD,eAAgB,WAC1C,yBAAKlD,UAAU,aACX,kHACA,4BAAQA,UAAU,SAASU,QAASlH,KAAKkI,UAAzC,iBAnKpB,+BA0KQ,OAAGlI,KAAKiC,MAAM6F,QACH,6BACH,kBAAC,EAAD,MACC9H,KAAK4J,uBAGX5J,KAAKiC,MAAM8F,QACH,6BACH,kBAAC,EAAD,MACH/H,KAAK6J,oBAEP7J,KAAKiC,MAAM+F,MACH,6BACH,kBAAC,EAAD,MACHhI,KAAK8J,kBAEH,6BACP,kBAAC,EAAD,MACC9J,KAAK6J,wBA5Ld,GAAyBzC,IAAMC,WCKX0C,QACW,cAA7BlK,OAAOwG,SAAS2D,UAEe,UAA7BnK,OAAOwG,SAAS2D,UAEhBnK,OAAOwG,SAAS2D,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBzI,WACrBA,UAAU0I,cAAcC,MACrBxI,MAAK,SAAAyI,GACJA,EAAaC,gBAEdpC,OAAM,SAAAL,GACLrF,QAAQqF,MAAMA,EAAM0C,c","file":"static/js/main.31fb2d52.chunk.js","sourcesContent":["import Dexie from 'dexie';\nexport class DBManager {\n\n    static get instance(){\n        window['_db_man'] = window['_db_man'] ? window['_db_man'] : new DBManager();\n        return window['_db_man'];\n    }\n\n    get db(){\n        if(!DBManager.instance['db_connection']){\n            DBManager.instance['db_connection'] = new Dexie(\"covidDatabase\");\n            DBManager.instance['db_connection'].version(1).stores(\n            {   \n                latestData: \"&link, date, values\"\n            });\n        }\n        return DBManager.instance['db_connection'];\n    }\n\n    async getWithKey(table, selectorFunction){\n        const data = await new Promise((accept, reject)=>{\n            this.db.transaction('r', this.db[table], async()=>{\n                try{\n                    const results = await selectorFunction(this.db[table]);\n                    accept(results);\n                }catch(err){\n                    reject(err);\n                }\n            });\n        });\n        return data;\n    }\n\n    async storeWithKey(table, value){\n        const index = await new Promise((accept, reject)=>{\n            this.db.transaction('rw', this.db[table], async()=>{\n                try{\n                    const id = await this.db[table].add(value);\n                    accept(id);\n                }catch(e){\n                    reject(e);\n                }\n            });\n        });\n        return index;\n    }\n\n    async deleteRecords(table, selectorFunction){\n        const data = await new Promise((accept, reject)=>{\n            this.db.transaction('rw', this.db[table], async()=>{\n                try{\n                    const results = await selectorFunction(this.db[table]);\n                    accept(results);\n                }catch(err){\n                    reject(err);\n                }\n            });\n        });\n        return data;\n    }\n\n\n}","import * as Papa from 'papaparse';\nimport * as dayjs from 'dayjs';\nimport { DBManager } from './db';\nimport example_results from '../example_parses_result_data.json';\n\n//https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/03-02-2020.csv\n\nexport default class Lib {\n\n\n    get FILES_LIST_URL(){\n        return `https://api.github.com/repos/CSSEGISandData/COVID-19/contents/csse_covid_19_data/csse_covid_19_daily_reports`;\n    }\n\n    get DEFAULT_FILE_URL(){\n        let file_date = dayjs().subtract(1, 'd').format(\"MM-DD-YYYY\") || '03-06-2020';\n        return `https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/${file_date}.csv`;\n    }\n\n    async getLatestFile(){\n        let dd = await fetch(this.FILES_LIST_URL);\n        let files_list = JSON.parse(await dd.text());\n        let _last_file = {\n            download_url: \"\"\n        };\n        for(let i=files_list.length-1;i>0;i--){\n            if(files_list[i].name.indexOf('csv')>-1){\n                _last_file = files_list[i];\n                break;\n            }\n        }\n        return _last_file.download_url;\n    }\n\n    static get instance(){\n        return window['geo_tool_1'] ? window['geo_tool_1'] : (()=>{\n            window['geo_tool_1'] = new Lib();\n            return window['geo_tool_1'];\n        })();\n    }\n\n    distance(UserLat, userLong, caseLat, caseLong, unit) {\n        if ((UserLat == caseLat) && (userLong == caseLong)) {\n            return 0;\n        }\n        else {\n            var radUserLat = Math.PI * UserLat / 180;\n            var radcaseLat = Math.PI * caseLat / 180;\n            var theta = userLong - caseLong;\n            var radtheta = Math.PI * theta / 180;\n            var dist = Math.sin(radUserLat) * Math.sin(radcaseLat) + Math.cos(radUserLat) * Math.cos(radcaseLat) * Math.cos(radtheta);\n            if (dist > 1) {\n                dist = 1;\n            }\n            dist = Math.acos(dist);\n            dist = dist * 180 / Math.PI;\n            dist = dist * 60 * 1.1515;\n            if (unit == \"K\") { dist = dist * 1.609344 }\n            if (unit == \"N\") { dist = dist * 0.8684 }\n            return dist;\n        }\n    }\n\n    async hasGeoLocationActivated(){\n        if(navigator.permissions){\n            return await new Promise((accept)=>{\n                navigator.permissions.query({name: 'geolocation'}).then(function(PermissionStatus) {\n                    accept(PermissionStatus.state == 'granted');\n                })\n            });\n        }\n        return null;\n    }\n\n    async fetchDeviceLocation(){\n        let res = await new Promise((accept, reject) => {\n            /**\n             *  latitude: 10.4963315\n                longitude: -66.877371\n                altitude: null\n                accuracy: 26\n                altitudeAccuracy: null\n                heading: null\n                speed: null\n             */\n            navigator.geolocation.getCurrentPosition(accept, reject);\n        });\n        return {\n            coords: [res.coords.latitude, res.coords.longitude],\n            accuracy: res.coords.accuracy\n        };\n    }\n\n    async fetchIpLocation(){\n        let data = await fetch('http://free.ipwhois.io/json/');\n        data = await data.json();\n        return {\n            coords: [data['latitude'], data['longitude']],\n            accuracy: -1\n        };\n    }\n\n    async fetchLocation() {\n        let res;\n        if (\"geolocation\" in navigator) {\n            /* la geolocalización está disponible */\n            try{\n                res = await this.fetchDeviceLocation();\n                return res;\n            }catch(e){\n                console.log(\"Error getting device geolocation: \",{e});\n            }\n        }\n        /* la geolocalización NO está disponible o ha habido un error al obetenerla */\n        //window.alert(\"Gelocation not available for this device\");\n        res = await this.fetchIpLocation();\n        return res;\n    }\n\n    /**\n     * @description Gets the currently stored data.\n     * If no current day data is stored,\n     * it returns null.\n     */\n    async getStoredData(downloadUrl){\n        try{\n            let data = await DBManager.instance.getWithKey('latestData', (latestData)=>{\n                if(downloadUrl){\n                    return latestData.get(downloadUrl);\n                }else{\n                    return latestData.orderBy('date').reverse().toArray();\n                }\n            });\n            return downloadUrl ? data : data[0];\n        }catch(e){\n            console.log({e});\n            return null;\n        }\n    }\n\n    get currentDayMillis(){\n        //03-06-2020\n        return new Date(dayjs().format(\"MM/DD/YYYY\")).getTime();\n    }\n\n    /**\n     * @description This stores the fetched data into the IndexDB.\n     * @param {*} data The data to be stored\n     */\n    async storeFetchedData(latest_link, latest_report, date_millis){\n        try{\n            //We purge previous records.\n            await DBManager.instance.deleteRecords('latestData', function(latestData){\n                return latestData.where('date').aboveOrEqual(0).delete();\n            });\n            //We store the new records\n            let link_id = await DBManager.instance.storeWithKey('latestData', {\n                date: date_millis,\n                link: latest_link,\n                values: latest_report\n            });\n            return {link_id};\n        }catch(e){\n            console.log({e});\n            return null;\n        }\n    }\n\n    async fetchData() {\n        let data = await new Promise(async (accept) => {\n            let download_url;\n            try{\n                download_url = await this.getLatestFile();\n            }catch(e){\n                download_url = this.DEFAULT_FILE_URL;\n            }\n            const currentData = await this.getStoredData(download_url);\n            if(!currentData){\n                let report_date = download_url.split(\"/\").pop().split(\".\")[0];\n                report_date = dayjs(report_date).toDate();\n                Papa.parse(download_url, {\n                    download: true,\n                    complete: async (results) => {\n                        const returnResults = results.data.map((element, index) => {\n                            if (index < 1) return null;\n                            let return_element =  {\n                                province_state: element[0],\n                                country_region: element[1],\n                                last_update: element[2],\n                                confirmed: parseInt(element[3]),\n                                deaths: parseInt(element[4]),\n                                recovered: parseInt(element[5]),\n                                latitude: parseFloat(element[6]),\n                                longitude: parseFloat(element[7]),\n                                report_date: report_date.toLocaleDateString()\n                            };\n                            if(return_element.latitude != return_element.latitude) return null;\n                            return return_element;\n                        }).filter((element) => !!element);\n                        await this.storeFetchedData(download_url, returnResults, report_date.getTime());\n                        accept(returnResults);\n                    }\n                });\n            }else{\n                accept(currentData.values);\n            }\n        });\n        return data;\n    }\n}","import React from 'react';\nimport {Helmet} from 'react-helmet';\n\nexport default class Header extends React.Component {\n    constructor(props){\n        super(props);\n    }\n\n    shareOnFb(){\n        window.open('https://www.facebook.com/sharer/sharer.php?u='+encodeURIComponent(window.location.href), '_blank');\n    }\n\n    getTwitterShareURL(){\n        return \"https://twitter.com/intent/tweet?text=\"+encodeURIComponent(\"How close are you from the CoronaVirus reported cases? Get the answer on: \"+window.location.href);\n    }\n\n    getShareWhatsappLink(){\n        const href = \"whatsapp://send?text=How close are you from the CoronaVirus reported cases? Get the answer on: \"+window.location.href;\n        return <a href={href} data-action=\"share/whatsapp/share\" className=\"button\" style={{backgroundColor:'#1EBEA5',color:'white', fontWeight:'bold'}}>Whatsapp</a>\n    }\n\n    render() {\n        return (\n            <header className=\"sticky\">\n                <a href=\"./\" className=\"logo\"><b>CClose</b></a>\n                <label htmlFor=\"modal-control\" className=\"button\">Share</label>\n                <a href=\"mailto:azolotdev@gmail.com\" className=\"button\">Contact</a>\n                <input type=\"checkbox\" id=\"modal-control\" className=\"modal\" />\n                <div>\n                    <div className=\"card\">\n                        <label htmlFor=\"modal-control\" className=\"modal-close\" ></label>\n                        <h3 className=\"section\" style={{paddingBottom:'1em'}}>Share via</h3>\n                        <a className=\"button\" href={this.getTwitterShareURL()} style={{backgroundColor:'#1DA1F2', color:'white', fontWeight:'bold'}}>Twitter</a>\n                        {this.getShareWhatsappLink()}\n                        <button className=\"button\" onClick={this.shareOnFb} style={{backgroundColor:'#3C5A9A', color:'white', fontWeight:'bold'}}>Facebook</button>\n                    </div>\n                </div>\n            </header>\n        )\n    }\n}","import React from 'react';\nimport {Helmet} from 'react-helmet';\n\nexport default class HelmetComponent extends React.Component {\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        return (\n            <Helmet>\n                <meta charSet=\"utf-8\" />\n                <title>CClose: Closes CoronaVirus case</title>\n                <link rel=\"canonical\" href=\"./\" />\n                <link rel=\"icon\" type=\"image/png\" href=\"./virus_icon.png\" sizes=\"16x16\" />\n                <meta name=\"description\" content=\"Closes Coronavirus to your location. Daily report\"></meta>\n            </Helmet>\n        );\n    }\n}","import React from 'react';\nimport './static/mini-default.min.css';\nimport './static/App.css';\nimport Lib from './code'\nimport Header from './code/header';\nimport HelmetComponent from './code/helmet';\n\nexport class App extends React.Component {\n\n    state = {\n        cases: [],\n        closest: null,\n        loading: false,\n        error: null,\n        geolocationPermission: null\n    }\n\n    constructor(props) {\n        super(props);\n        this.loadData = this.loadData.bind(this);\n        this.loadGeoPermissionStatus = this.loadGeoPermissionStatus.bind(this);\n        /*\n        this.loadData()\n        .catch((err) => {\n            console.log({ err });\n        })\n        */\n       this.loadGeoPermissionStatus()\n       .then(()=>{\n            console.log(\"--- 1\");\n            this.loadData();\n       })\n       .catch((err)=>{\n        console.log(\"--- 2\");\n        console.log({err});\n       });\n    }\n\n    async loadGeoPermissionStatus(){\n        try{\n            let geolocationPermission = await Lib.instance.hasGeoLocationActivated();\n            this.setState({geolocationPermission})\n        }catch(err){\n            console.log({err});\n            this.setState({geolocationPermission: null})\n        }\n    }\n\n    async loadData() {\n        let lib = new Lib();\n        //let cases = await lib.fetchData();\n        //let location = await lib.fetchLocation();\n        this.setState({\n            loading: true\n        });\n        try {\n            const _res = await Promise.all([lib.fetchData(), lib.fetchLocation()])\n            let cases = _res[0];\n            let location = _res[1];\n            cases = cases.map((element) => {\n                let raw_distance = lib.distance(location.coords[0], location.coords[1], element.latitude, element.longitude, 'K');\n                element.distance_from_user = Math.round(raw_distance * 100) / 100;\n                return element;\n            })\n            .sort((elementA, elementB) => {\n                return (elementA.distance_from_user > elementB.distance_from_user) ? 1 : (elementA.distance_from_user < elementB.distance_from_user) ? -1 : 0;\n            });\n            //Lib.instance\n            this.setState({\n                cases: cases,\n                closest: cases[0],\n                loading: false\n            });\n        } catch (e) {\n            console.log({e});\n            this.setState({\n                loading: false, error: e\n            })\n        }\n    }\n\n    getAuthorizedScreen() {\n\n        let elements = this.state.cases\n            .filter((e, index) => index > 1)\n            .map((element1, index) =>\n                <tr key={`LAT=${element1.latitude};LONG=${element1.longitude};${index}`}>\n                    <td data-label=\"Location\">{element1.country_region} <small>{element1.province_state}</small></td>\n                    <td data-label=\"Distance Away\">{element1.distance_from_user} km</td>\n                    <td data-label=\"Confirmed\">{element1.confirmed}</td>\n                    <td data-label=\"Deaths\">{element1.deaths}</td>\n                    <td data-label=\"Recovered\">{element1.recovered}</td>\n                </tr>\n            )\n        let closest = \"\";\n        if (this.state.closest) {\n            closest =\n                <div className=\"card error\" style={{ maxWidth: '100%' }}>\n                    <h2>{this.state.closest.distance_from_user} km <small style={{ color: 'white' }}>{this.state.closest.country_region} {this.state.closest.province_state ? '-' + this.state.closest.province_state : ''}</small></h2>\n                    <div>\n                        <p>Confirmed: {this.state.closest.confirmed}</p>\n                        <p>Deaths: {this.state.closest.deaths}</p>\n                        <p>Recovered: {this.state.closest.recovered}</p>\n                    </div>\n                </div>\n        }\n        return (<div className=\"App\">\n            <Header />\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-sm-12\">\n                        <h1>CC: CoronaClose\n                                <small>How close are you from the <span style={{ color: 'red' }}>Corona VID-19</span> cases?</small>\n                        </h1>\n                        <h2>Closest case to you (at {this.state.closest.report_date})</h2>\n                        <small><a href=\"https://github.com/CSSEGISandData/COVID-19\">Information Source</a></small>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    {closest ? closest : ''}\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-sm-12 col-md-12 col-sm-first\">\n                        <h3>Next Closest Cases</h3>\n                        <table>\n                            <thead>\n                                <tr>\n                                    <th>Location</th>\n                                    <th>Distance</th>\n                                    <th>Confirmed</th>\n                                    <th>Deaths</th>\n                                    <th>Recovered</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {elements}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </div>);\n    }\n\n    getNotLoadedScreen() {\n        return (\n            <div className=\"row\" style={{ justifyContent: 'center' }}>\n                <div className=\"card\" style={{ textAlign: 'center' }}>\n                    <h1>Note: You must enable location in order to get the data</h1>\n                    <button className=\"button\" onClick={this.loadData}>Begin</button>\n                </div>\n            </div>\n        )\n    }\n\n    getLoadingScreen() {\n        return (\n            <div className=\"row\" style={{ justifyContent: 'center' }}>\n                <div className=\"col-sm-12\">\n                    <h1>Loading...</h1>\n                </div>\n            </div>\n        )\n    }\n\n    getErrorScreen(){\n        return (\n            <div className=\"row\" style={{ justifyContent: 'center' }}>\n                <div className=\"col-sm-12\">\n                    <h1>An error has occurred. Please try again later and try cleaning your browser cache.</h1>\n                    <button className=\"button\" onClick={this.loadData}>Try Again</button>\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        if(this.state.closest){\n            return <div>\n                <HelmetComponent/>\n                {this.getAuthorizedScreen()}\n            </div>;\n        }\n        if(this.state.loading){\n            return <div>\n                <HelmetComponent/>\n            {this.getLoadingScreen()}</div>\n        }\n        if(this.state.error){\n            return <div>\n                <HelmetComponent/>\n            {this.getErrorScreen()}</div>\n        }\n        return <div>\n        <HelmetComponent/>\n        {this.getLoadingScreen()}</div>;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}